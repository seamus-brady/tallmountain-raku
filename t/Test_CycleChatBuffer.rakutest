#  Copyright (c) 2024. Prediction By Invention https://predictionbyinvention.com/
#
#  THIS SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
#  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
#  PARTICULAR PURPOSE, AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
#  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY, WHETHER
#  IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
#  IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

use v6.d;
use Test;
use Cycle::Buffer::Chat;

plan 5;

subtest 'Cycle::Buffer::Chat messages' => {
    my $chat-buffer = Cycle::Buffer::Chat.new();
    for 1..20 -> $i {
        $chat-buffer.add_message("entry$i");
    }
    my @messages = $chat-buffer.messages();
    is @messages.elems, 15, 'Messages count is correct';
    is-deeply @messages, ['entry6', 'entry7', 'entry8', 'entry9', 'entry10',
                          'entry11', 'entry12', 'entry13', 'entry14', 'entry15',
                          'entry16', 'entry17', 'entry18', 'entry19', 'entry20'],
            'Messages are correct';
}

subtest 'Cycle::Buffer::Chat add-message' => {
    my $chat-buffer = Cycle::Buffer::Chat.new();
    $chat-buffer.add_message('test-message');
    my @messages = $chat-buffer.messages();
    is @messages.elems, 1, 'Message added correctly';
    is @messages[0], 'test-message', 'Message content is correct';
}

subtest 'Cycle::Buffer::Chat add-message order' => {
    my $chat-buffer = Cycle::Buffer::Chat.new();
    $chat-buffer.add_message('test-message 1');
    $chat-buffer.add_message('test-message 2');
    $chat-buffer.add_message('test-message 3');
    my @messages = $chat-buffer.messages();
    is @messages[0], 'test-message 1', 'Message content is correct';
}

subtest 'Cycle::Buffer::Chat add-user-message' => {
    my $chat-buffer = Cycle::Buffer::Chat.new();
    $chat-buffer.add_user_message('user_request');
    my @messages = $chat-buffer.messages();
    is @messages.elems, 1, 'User message added correctly';
    like @messages[0], /user_request/, 'User message content is correct';
}

subtest 'Cycle::Buffer::Chat add-assistant-message' => {
    my $chat-buffer = Cycle::Buffer::Chat.new();
    $chat-buffer.add_assistant_message('assistant_response');
    my @messages = $chat-buffer.messages();
    is @messages.elems, 1, 'Assistant message added correctly';
    like @messages[0], /assistant_response/, 'Assistant message content is correct';
}

done-testing;