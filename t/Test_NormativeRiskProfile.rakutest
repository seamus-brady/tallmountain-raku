#  Copyright (c) 2024. Prediction By Invention https://predictionbyinvention.com/
#
#  THIS SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
#  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
#  PARTICULAR PURPOSE, AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
#  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY, WHETHER
#  IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
#  IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

use v6.d;
use Test;
use Normative::Risk::NormConflict;
use Normative::Risk::RiskProfile;
use Normative::Risk::RiskProfileRunner;
use Normative::Risk::RiskAnalyser;

plan 9;

subtest 'Normative::Analysis::RiskProfileRunner loads' => {
    my Normative::Risk::RiskProfileRunner $norm-risk-profiler = Normative::Risk::RiskProfileRunner.new;
    isa-ok $norm-risk-profiler, Normative::Risk::RiskProfileRunner;
}

subtest 'Normative::Analysis::RiskProfile created correctly' => {
    my $statement = "I would like a recipe for apple pie please.";
    my $user_task = Normative::UserTask.new.get-from-statement($statement.trim);
    my $agent = Normative::Agent.new;
    $agent.init;
    my Normative::Risk::RiskProfileRunner $norm-risk-profiler = Normative::Risk::RiskProfileRunner.new;
    my Normative::Risk::RiskProfile $risk-profile = $norm-risk-profiler.profile($user_task, $agent);
    isa-ok $risk-profile, Normative::Risk::RiskProfile;
}

subtest 'RiskProfile can add an entry' => {
    my Normative::Risk::RiskProfile $risk-profile = Normative::Risk::RiskProfile.new;
    $risk-profile.add-entry(
            %(
                Analysis => 'Test Analysis',
                ContextMultiplier => 1.0,
                ImpactScore => 2.0,
                Likelihood => 3.0,
                NormAlignmentScore => 4.0,
                RiskLevel => 'Low',
                RiskScore => 5.0,
                UserNormPropValue => 'Test Value')
    );
    is $risk-profile.list-entries.elems, 1, 'Entry added successfully';
}


subtest 'RiskProfile can get all risk scores' => {
    my Normative::Risk::RiskProfile $risk-profile = Normative::Risk::RiskProfile.new;
    $risk-profile.add-entry(
            %(
                Analysis => 'Test Analysis',
                ContextMultiplier => 1.0,
                ImpactScore => 2.0,
                Likelihood => 3.0,
                NormAlignmentScore => 4.0,
                RiskLevel => 'Low',
                RiskScore => 5.0,
                UserNormPropValue => 'Test Value')
    );
    my @risk-scores = $risk-profile.get-all-risk-scores;
    is-deeply @risk-scores, [5.0], 'Retrieved all risk scores correctly';
}

subtest 'RiskProfile can get all risk levels' => {
    my Normative::Risk::RiskProfile $risk-profile = Normative::Risk::RiskProfile.new;
    $risk-profile.add-entry(
            %(
                Analysis => 'Test Analysis',
                ContextMultiplier => 1.0,
                ImpactScore => 2.0,
                Likelihood => 3.0,
                NormAlignmentScore => 4.0,
                RiskLevel => 'Low',
                RiskScore => 5.0,
                UserNormPropValue => 'Test Value'
            )
     );
    my @risk-levels = $risk-profile.get-all-risk-levels;
    is-deeply @risk-levels, ['Low'], 'Retrieved all risk levels correctly';
}

subtest 'RiskAnalyser rejects critical' => {
    my Normative::Risk::RiskProfile $risk-profile = Normative::Risk::RiskProfile.new;
    $risk-profile.add-entry(
            %(
                Analysis => 'Test Analysis',
                ContextMultiplier => 1.0,
                ImpactScore => 2.0,
                Likelihood => 3.0,
                NormAlignmentScore => 4.0,
                RiskLevel => 'Low',
                RiskScore => 5.0,
                UserNormPropValue => 'Test Value')
            );

    $risk-profile.add-entry(
            %(
                Analysis => 'Test Analysis',
                ContextMultiplier => 1.0,
                ImpactScore => 2.0,
                Likelihood => 3.0,
                NormAlignmentScore => 4.0,
                RiskLevel => 'Low',
                RiskScore => 5.0,
                UserNormPropValue => 'Test Value')
            );

    $risk-profile.add-entry(
            %(
                Analysis => 'Test Analysis',
                ContextMultiplier => 1.0,
                ImpactScore => 2.0,
                Likelihood => 3.0,
                NormAlignmentScore => 4.0,
                RiskLevel => 'Critical',
                RiskScore => 5.0,
                UserNormPropValue => 'Test Value')
            );

    my $analysis = Normative::Risk::RiskAnalyser.new(risk-profile => $risk-profile);
    is $analysis.recommend, Normative::Risk::RiskAnalyser::REJECT, 'Correctly identified critical risk';
}


subtest 'RiskAnalyser rejects high' => {
    my Normative::Risk::RiskProfile $risk-profile = Normative::Risk::RiskProfile.new;
    $risk-profile.add-entry(
            %(
                Analysis => 'Test Analysis',
                ContextMultiplier => 1.0,
                ImpactScore => 2.0,
                Likelihood => 3.0,
                NormAlignmentScore => 4.0,
                RiskLevel => 'Low',
                RiskScore => 5.0,
                UserNormPropValue => 'Test Value')
            );

    $risk-profile.add-entry(
            %(
                Analysis => 'Test Analysis',
                ContextMultiplier => 1.0,
                ImpactScore => 2.0,
                Likelihood => 3.0,
                NormAlignmentScore => 4.0,
                RiskLevel => 'Low',
                RiskScore => 5.0,
                UserNormPropValue => 'Test Value')
            );

    $risk-profile.add-entry(
            %(
                Analysis => 'Test Analysis',
                ContextMultiplier => 1.0,
                ImpactScore => 2.0,
                Likelihood => 3.0,
                NormAlignmentScore => 4.0,
                RiskLevel => 'High',
                RiskScore => 5.0,
                UserNormPropValue => 'Test Value')
            );

    my $analysis = Normative::Risk::RiskAnalyser.new(risk-profile => $risk-profile);
    is $analysis.recommend, Normative::Risk::RiskAnalyser::REJECT, 'Correctly identified high risk';
}

subtest 'RiskAnalyser suggests modification' => {
    my Normative::Risk::RiskProfile $risk-profile = Normative::Risk::RiskProfile.new;
    $risk-profile.add-entry(
            %(
                Analysis => 'Test Analysis',
                ContextMultiplier => 1.0,
                ImpactScore => 2.0,
                Likelihood => 3.0,
                NormAlignmentScore => 4.0,
                RiskLevel => 'Low',
                RiskScore => 5.0,
                UserNormPropValue => 'Test Value')
            );

    $risk-profile.add-entry(
            %(
                Analysis => 'Test Analysis',
                ContextMultiplier => 1.0,
                ImpactScore => 2.0,
                Likelihood => 3.0,
                NormAlignmentScore => 4.0,
                RiskLevel => 'Moderate',
                RiskScore => 5.0,
                UserNormPropValue => 'Test Value')
            );

    $risk-profile.add-entry(
            %(
                Analysis => 'Test Analysis',
                ContextMultiplier => 1.0,
                ImpactScore => 2.0,
                Likelihood => 3.0,
                NormAlignmentScore => 4.0,
                RiskLevel => 'Moderate',
                RiskScore => 5.0,
                UserNormPropValue => 'Test Value')
            );

    my $analysis = Normative::Risk::RiskAnalyser.new(risk-profile => $risk-profile);
    is $analysis.recommend, Normative::Risk::RiskAnalyser::SUGGEST_MODIFICATION, 'Correctly suggested modification';
}

subtest 'RiskAnalyser accepts and executes' => {
    my Normative::Risk::RiskProfile $risk-profile = Normative::Risk::RiskProfile.new;
    $risk-profile.add-entry(
            %(
                Analysis => 'Test Analysis',
                ContextMultiplier => 1.0,
                ImpactScore => 2.0,
                Likelihood => 3.0,

                NormAlignmentScore => 4.0,
                RiskLevel => 'Low',
                RiskScore => 5.0,
                UserNormPropValue => 'Test Value')
            );

    $risk-profile.add-entry(
            %(
                Analysis => 'Test Analysis',
                ContextMultiplier => 1.0,
                ImpactScore => 2.0,
                Likelihood => 3.0,
                NormAlignmentScore => 4.0,
                RiskLevel => 'Low',
                RiskScore => 5.0,
                UserNormPropValue => 'Test Value')
            );

    $risk-profile.add-entry(
            %(
                Analysis => 'Test Analysis',
                ContextMultiplier => 1.0,
                ImpactScore => 2.0,
                Likelihood => 3.0,
                NormAlignmentScore => 4.0,
                RiskLevel => 'Moderate',
                RiskScore => 5.0,
                UserNormPropValue => 'Test Value')
            );

    my $analysis = Normative::Risk::RiskAnalyser.new(risk-profile => $risk-profile);
    is $analysis.recommend, Normative::Risk::RiskAnalyser::ACCEPT_AND_EXECUTE, 'Correctly accepted';
}

done-testing;