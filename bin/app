#!/usr/bin/env raku

#  Copyright (c) 2024. Prediction By Invention https://predictionbyinvention.com/
#
#  THIS SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
#  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
#  PARTICULAR PURPOSE, AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
#  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY, WHETHER
#  IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
#  IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

use v6.d;
use lib 'lib';
use Util::Logger;
use Cro::HTTP::Server;
use Cro::HTTP::Router;
use Cro::HTTP::Log::File;
use Cycle::Cognitive;
use Cycle::Payload::TaintedString;
use WWW::ChatUI;

my $APP_LOGGER = Util::Logger.new(namespace => "<TallMountain App>");
my Supplier $chat-request-supplier = Supplier.new;
my Supply $chat-request-supply = $chat-request-supplier.Supply;
my Channel $chat-response-channel = Channel.new;

sub routes() {
    route {
        # process the user message and return the response
        post -> 'chat' {

            # get the user message from the request body
            my $prompt;
            request-body -> %fields {
                $prompt = %fields<message>;
            }
            $APP_LOGGER.debug("Received user message: '$prompt'");
            $chat-request-supplier.emit($prompt);

            # get the bot reply
            my $bot-response = $chat-response-channel.receive;
            $APP_LOGGER.debug("Received bot reply: '$bot-response'");

            # return the response as an htmx fragment
            my $htmx-fragment = get_response($prompt, $bot-response);
            content 'text/html', $htmx-fragment;
        }

        # serve the chat UI
        get -> {
            static 'www/chat_ui.html';
        }
    }
}

sub get_response(Str $prompt, Str $bot-response --> Str){
    my Str $response =  qq:to/END/;
        <div class="message-container user-message-container">
        <img src="https://img.icons8.com/color/48/000000/user.png" class="icon" alt="User Icon">
        <span>{$prompt}</span>
        </div>
        <div class="message-container bot-message-container">
        <img src="https://img.icons8.com/ios-filled/50/4a90e2/mountain.png" class="icon" alt="Bot Icon">
        <span class="bot-message">{$bot-response}</span>
        </div>
        END
    return $response.trim;
}

sub check-api-key {
    # Check for OPENAI_API_KEY environment variable
    my $api-key = %*ENV<OPENAI_API_KEY>;
    if not $api-key.defined {
        my $msg = "OPENAI_API_KEY environment variable not found";
        $APP_LOGGER.debug($msg);
        die $msg;
    }
}

sub MAIN() {
    check-api-key;

    my $host = Util::Config.get_config('chat_ui', 'chat_ui_server');
    my $port = Util::Config.get_config('chat_ui', 'chat_ui_port');
    my Cro::Service $http = Cro::HTTP::Server.new(
            http => <1.1>,
            host => $host,
            port => $port,
            application => routes(),
            after => [
                Cro::HTTP::Log::File.new(logs => $*OUT, errors => $*ERR)
            ]
            );

    $http.start;

    my $cycle = Cycle::Cognitive.new;

    # Start the chat ui server in the background
    start {
        react {
            # Whenever a chat request is received, process it
            whenever $chat-request-supply -> $request {
                $APP_LOGGER.debug("App received user request: '$request'");

                # get a response but wrap in a tainted string
                my $tainted-string = Cycle::TaintedString.new(payload => $request);
                my $response = $cycle.run-one-cycle($tainted-string);
                $APP_LOGGER.debug("App received bot response: '$response'");

                # return the response
                $chat-response-channel.send($response);
            };
        }
    }

    react {
        whenever signal(SIGINT) {
            say "Shutting down...";
            $http.stop;
            done;
        }
    }
}