#!/usr/bin/env raku

#  Copyright (c) 2024. Prediction By Invention https://predictionbyinvention.com/
#
#  THIS SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
#  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
#  PARTICULAR PURPOSE, AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
#  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY, WHETHER
#  IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
#  IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

use v6.d;
use lib 'lib';
use Cro::HTTP::Router;
use Cro::HTTP::Server;

# Define a supply for chat events
my $supplier = Supplier.new;
my $chat-supply = $supplier.Supply;


my $chat_ui_app = route {

    # process the user message and return the response
    post -> 'chat' {
        my $prompt;

        # get the user message from the request body
        request-body -> %fields {
            $prompt = %fields<message>;
        }
        $supplier.emit($prompt);
        my $response = get_response($prompt);
        content 'text/html', $response;
    }

    # serve the chat UI
    get -> {
        static 'www/chat_ui.html';
    }
}


sub get_response($prompt){
    my $response =  qq:to/END/;
            <div class="message-container user-message-container">
            <img src="https://img.icons8.com/color/48/000000/user.png" class="icon" alt="User Icon">
            <span>$prompt
            </div>
            <div class="message-container bot-message-container">
            <img src="https://img.icons8.com/ios-filled/50/4a90e2/mountain.png" class="icon" alt="Bot Icon">
            <span>Hello!</span>
            </div>
            END
    return $response;
}

# Start the chat ui server in the background
start {
    my $server = Cro::HTTP::Server.new: :host<localhost>, :port<10000>, application => $chat_ui_app;
    $server.start;
    say "Listening at...";
    react {
        whenever signal(SIGINT) {
            say "Shutting down...";
            $server.stop;
            done;
        }
    }
}

# Main application logic
say "Chat UI server running at http://localhost:10000";

react {

    whenever $chat-supply -> $x {
        say "Supply received event: $x";
    };

    whenever signal(SIGINT) {
        say "Shutting down...";
        $chat-supply.done;
    }
}